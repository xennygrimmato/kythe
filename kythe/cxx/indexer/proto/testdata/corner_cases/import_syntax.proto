// Test file to exercise the multi-line import syntax cases raised by bugs like
// b/12113401.

syntax = "proto2";

//- @"package proto_kythe_test;" ref ThePackage
package proto_kythe_test;
option java_package = "io.kythe";

//- @"import \"other-package.proto\";" ref/includes _OtherPackageImport
import "other-package.proto";
import "basic/nested-message.proto";
//- @"import public \"basic/oneof.proto\";" ref/includes _PublicImport
import public "basic/oneof.proto";

// Message to test for various syntax expressions of referring to a message
// defined in a namespace.
message TestMessage {
  //- @"itsapackage.Foo" ref FooMessage
  optional itsapackage.Foo test_foo = 1;
  //- DotLineOne.node/kind anchor
  //- DotLineOne.loc/start @^"itsapackage."
  //- DotLineOne.loc/end @$+3"Bar"
  //- DotLineOne ref BarMessage
  optional itsapackage.
  Bar test_bar = 2;

  //- DotLineTwo.node/kind anchor
  //- DotLineTwo.loc/start @^"itsapackage"
  //- DotLineTwo.loc/end @$+3".Baz"
  //- DotLineTwo ref BazMessage
  optional itsapackage
  .Baz test_baz = 3;

  // Here the base case is already covered in nested-message-field.proto
  //- NestedDotLineOne.node/kind anchor
  //- NestedDotLineOne.loc/start @^"ParentMessage."
  //- NestedDotLineOne.loc/end @$+3"NestedMessage"
  //- NestedDotLineOne ref NestedMessage
  optional ParentMessage.
  NestedMessage test_nested_import = 4;

  //- NestedDotLineTwo.node/kind anchor
  //- NestedDotLineTwo.loc/start @^"ParentMessage"
  //- NestedDotLineTwo.loc/end @$+3".NestedMessage"
  //- NestedDotLineTwo ref NestedMessage
  optional ParentMessage
  .NestedMessage test_nested_import_again = 5;
}
